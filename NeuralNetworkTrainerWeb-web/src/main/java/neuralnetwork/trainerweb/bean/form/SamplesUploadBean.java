package neuralnetwork.trainerweb.bean.form;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.StandardCopyOption;
import javax.enterprise.context.RequestScoped;
import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;
import javax.inject.Inject;
import javax.inject.Named;
import javax.servlet.http.Part;
import neuralnetwork.commons.samples.SamplesRepository;
import neuralnetwork.commons.util.SamplesFileUtils;
import neuralnetwork.trainerweb.bean.SettingsBean;
import neuralnetwork.trainerweb.bean.repository.SamplesRepositoryBean;

/**
 * JSF bean for uploading neural network's training samples file and reading 
 * filling samples repository from it.
 * @author Konstantin Zhdanov
 */
@Named
@RequestScoped
public class SamplesUploadBean {
    private static final int RAND_SUFFIX_SIZE = 5; 
    private static final int MAX_SAVE_FAIL_NUM = 100;
    
    @Inject
    private SettingsBean settings; 
    
    @Inject
    private SamplesRepositoryBean repository;
    
    private Part file;
    
    private String validationErrorMsg;

    /**
     * Get {@link Part} object containing samples repository file.
     * @return {@link Part} object chosen by user.
     */
    public Part getFile() {
        return file;
    }

    /**
     * Set {@link Part} containing samples repository file to be uploaded.
     * @param file {@link Part} containing samples repository file.
     */
    public void setFile(Part file) {
        this.file = file;
    }
    
    /**
     * Get the error message of file validation generated by Javascript on the page.
     * @return {@link String} error message generated by the page.
     */
    public String getValidationErrorMsg() {
        return validationErrorMsg;
    }

    /**
     * Set new error message resulting from file validation on the page. The
     * error message will be shown after the form has been posted.
     * @param validationErrorMsg {@link String} error message to be set.
     */
    public void setValidationErrorMsg(String validationErrorMsg) {
        this.validationErrorMsg = validationErrorMsg;
    }
    
    /**
     * Upload samples values from user-provided file.
     */
    public void upload() {
        if (file == null) {
            if (validationErrorMsg != null && !validationErrorMsg.trim().isEmpty()) {
                FacesContext.getCurrentInstance().addMessage(
                    null, 
                    new FacesMessage(validationErrorMsg)
                );
            }
            return;
        }
        if (file.getSize() > settings.getMaxFileUploadSizeInBytes()) {
            FacesContext.getCurrentInstance().addMessage(
                    null, 
                    new FacesMessage("File is too large (max size is " +
                            (settings.getMaxFileUploadSizeInBytes()) + " bytes): " + 
                            file.getSubmittedFileName())
            );
            return;
        }
        if (!extractExtension(file.getSubmittedFileName()).trim().toLowerCase().
                equals("csv")) {
            FacesContext.getCurrentInstance().addMessage(
                    null, 
                    new FacesMessage("Samples can be uploaded only from a '.csv' file.")
            );
            return;
        }
        File tempFile = null;
        try {
            tempFile = File.createTempFile("uploadedNN", ".tmp");
            Files.copy(file.getInputStream(), tempFile.toPath(), StandardCopyOption.REPLACE_EXISTING);
            SamplesRepository<Double> samples = SamplesFileUtils.
                    loadFromCSV(tempFile.getAbsolutePath());

            String newName = getUniqueName(extractName(
                        file.getSubmittedFileName()));
            if (newName == null) {
                throw new IOException();
            }
            repository.add(newName.trim(), samples);
        }
        catch (IOException | IllegalArgumentException e) {
            FacesContext.getCurrentInstance().addMessage(
                    null, 
                    new FacesMessage("Error reading file: " + 
                            file.getSubmittedFileName())
            );
        }
        finally {
            if (tempFile != null) {
                tempFile.delete();
            }
        }
    }
    
    private String getUniqueName(String firstName){
        int nNameFailed = 0;
        while (repository.containsName(firstName) && nNameFailed < MAX_SAVE_FAIL_NUM) {
            firstName = firstName + getRandomStringOfSize(RAND_SUFFIX_SIZE);
            nNameFailed++;
        }
        if (repository.containsName(firstName)) {
            return null;
        }
        return firstName;
    }
    
    private String getRandomStringOfSize(int size) {
        char[] randChars = new char[size];
        for (int i = 0; i < size; i++) {
            randChars[i] = (char)('a' + (int)(Math.random()*26));
        }
        return new String(randChars);
    }
    
    private String extractName(String submittedFileName) {
        int dotIdx = submittedFileName.lastIndexOf('.');
        return submittedFileName.substring(0, dotIdx);
    }
    
    private String extractExtension(String submittedFileName) {
        int dotIdx = submittedFileName.lastIndexOf('.');
        return submittedFileName.substring(dotIdx + 1);
    }
}
